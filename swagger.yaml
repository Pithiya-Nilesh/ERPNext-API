openapi: 3.0.0
info:
  title: ERPNext API
  description: Swagger documentation for ERPNext REST APIs
  version: 1.0.0
servers:
  - url: https://maxbuygh.frappe.cloud
    # description: ERPNext Server

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization

security:
  - ApiKeyAuth: []

paths:
  # /api/method/login:
  #   post:
  #     summary: User Authentication
  #     description: Authenticate user to get session cookie
  #     tags:
  #       - Authentication
  #     parameters:
  #       - in: header
  #         name: Accept
  #         required: true
  #         schema:
  #           type: string
  #         example: application/json
  #       - in: header
  #         name: Content-Type
  #         required: true
  #         schema:
  #           type: string
  #         example: application/json
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               usr:
  #                 type: string
  #                 description: Username
  #                 example: user@example.com
  #               pwd:
  #                 type: string
  #                 description: Password
  #                 example: password123
  #             required:
  #               - usr
  #               - pwd
  #     responses:
  #       '200':
  #         description: Successful authentication
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 home_page:
  #                   type: string
  #                   example: /desk
  #                 full_name:
  #                   type: string
  #                   example: Administrator
  #                 message:
  #                   type: string
  #                   example: Logged in
  #       '401':
  #         description: Authentication failed
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 message:
  #                   type: string
  #                   example: Authentication failed

  /api/resource/Sales Order:
    get:
      summary: Get Sales Orders
      description: Retrieve a list of sales orders
      tags:
        - Sales Orders
      parameters:
        # - name: token <api key>:<api secret>
        #   in: header
        #   schema:
        #     type: string
        #   required: true
        #   description: user api key and secret
        - name: limit_start
          in: query
          schema:
            type: integer
          description: Starting point of list
        - name: limit_page_length
          in: query
          schema:
            type: integer
          description: Number of records per page
        - name: filters
          in: query
          schema:
            type: string
            items:
              type: string
              items:
                type: string
            example: '[["customer", "=", "xyz"], ["name", "=", "SO-0001"]]'
          description: Array of filter conditions [["customer", "=", "xyz"], ["name", "=", "SO-0001"]]
        - name: fields 
          in: query
          schema:
            type: array
            items:
              type: string
              items:
                type: string
            example: '["*"]'
          description: use ["*"] to get all field else specify fields name ["customer", "name", "date"]
      responses:
        '200':
          description: Successful retrieval of sales orders
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    customer:
                      type: string
                    items:
                      type: array
                      items:
                        type: object
                        properties:
                          item_code:
                            type: string
                          qty:
                            type: integer
                          rate:
                            type: number
        '401':
          description: Unauthorized
    post:
      summary: Create Sales Order
      description: Create a new sales order
      tags:
        - Sales Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customer:
                  type: string
                  description: Customer name
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      item_code:
                        type: string
                      qty:
                        type: integer
                      rate:
                        type: number
              required:
                - customer
                - items
      responses:
        '200':
          description: Sales order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  customer:
                    type: string
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        item_code:
                          type: string
                        qty:
                          type: integer
                        rate:
                          type: number
        '400':
          description: Bad request
        '401':
          description: Unauthorized


  /api/resource/Item:
    get:
      summary: Get Items
      description: Retrieve a list of items
      tags:
        - Items
      parameters:
        - name: limit_start
          in: query
          schema:
            type: integer
          description: Starting point of list
        - name: limit_page_length
          in: query
          schema:
            type: integer
          description: Number of records per page
        - name: filters
          in: query
          schema:
            type: array
            items:
              type: array
              items:
                type: string
            example: '[["item_code", "=", "item1"], ["item_group", "=", "Products"]]'
          description: Array of filter conditions [["item_code", "=", "item1"], ["item_group", "=", "Products"]]
        - name: fields
          in: query
          schema:
            type: array
            items:
              type: string
              items:
                type: string
            example: '["*"]'
          description: use ["*"] to get all field else specify fields name ["item_code", "item_name", "description", "stock_uom"]
      responses:
        '200':
          description: Successful retrieval of items
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        item_code:
                          type: string
                        item_name:
                          type: string
                        description:
                          type: string
                        stock_uom:
                          type: string

  /api/resource/Bin:
    get:
      summary: Get Item Stock with Warehouse
      description: Retrieve item stock with warehouse details
      tags:
        - Items
      parameters:
        - name: filters
          in: query
          schema:
            type: array
            items:
              type: array
              items:
                type: string
            example: '[["item_code", "=", "item1"], ["warehouse", "=", "warehouse"]]'
          description: Array of filter conditions [["item_code", "=", "item1"], ["warehouse", "=", "warehouse"]]
        - name: fields
          in: query
          schema:
            type: array
            items:
              type: string
              items:
                type: string
            example: '["*"]'
          description: use ["*"] to get all field else specify fields name ["item_code", "warehouse", "actual_qty"]
      responses:
        '200':
          description: Successful retrieval of item stock
          content:
            application/json:
              schema:
                type: object
                properties:
                  item_code:
                    type: string
                  warehouse:
                    type: string
                  actual_qty:
                    type: number
        '404':
          description: Item or warehouse not found
